@model EditPlaylistViewModel
@{
    ViewData["Title"] = "Editing " + Model.Playlist.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="index__header">
    <h1>Editing: @Model.Playlist.Title</h1>
    <a asp-action="Index">
        <span class="material-icons">library_music</span>
        &nbsp;&nbsp;My playlists
    </a>
</div>

@{ string image = String.Format("data:image/*;base64,{0}", Convert.ToBase64String(Model.Playlist.Image)); }

<div class="edit__playlist mt-3">
    <img id="playlist__image" src="@image" alt="artwork" />
    <div class="col-md-6 ml-3">
        <form asp-action="Edit" method="post" enctype="multipart/form-data">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Playlist.Id" />

            <div class="form-group">
                <label asp-for="Playlist.Title" class="control-label"></label>
                <input asp-for="Playlist.Title" class="form-control" autocomplete="off" />
                <span asp-validation-for="Playlist.Title" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Image" class="control-label"></label>
                <input asp-for="Image" type="file" accept=".png, .jpg, .jpeg" id="image" class="form-control" />
                <span class="text-danger" style="display: none;" id="size">Only images under 30MB are accepted.</span>
                <span class="text-danger" style="display: none;" id="type">Please select a .png, .jpg or .jpeg image.</span>
            </div>

            <input asp-for="Playlist.Image" type="hidden" />
            <input asp-for="Playlist.UserId" type="hidden" />
            <input asp-for="Playlist.Songs" id="songs" type="hidden" />

            <input type="submit" value="Save" class="btn btn-success mt-3" />

        </form>
    </div>
</div>

@if (Model.PlaylistSongs != null && Model.PlaylistSongs.Any())
{
    <div id="playlist" class="songs mt-4">
        <div class="songs__header">
            <span>#</span>
            <span>Title</span>
            <span>Date added</span>
        </div>
        <hr />
       @{int i = 1;}
       @foreach (var song in Model.PlaylistSongs)
       {
           string audio = String.Format("data:audio/*;base64,{0}", Convert.ToBase64String(song.Audio));
            <div class="songs__track">
                <span class="songs__track__count">@i</span>
                <span class="songs__track__title">
                    <span>
                        <span>@song.Name</span>
                    </span>
                </span>
                <span class="songs__track__added">
                    <span class="material-icons-round remove" style="font-size: 16px;" onclick="removeSong(@i)">
                        remove_circle_outline
                    </span>
                    <span>@song.DateAdded.Replace("/", ".").Replace(" ", " - ").Remove(song.DateAdded.Length - 1)</span>
                </span>
            </div>
           i++;
       }
    </div>
}

@if (Model.AllSongs != null && Model.AllSongs.Any())
{
    <div class="songs mt-4">
        <h3 class="mb-4">Your library</h3>
        <div class="songs__header">
            <span>#</span>
            <span>Title</span>
            <span>Date added</span>
        </div>
        <hr />
       @foreach (var song in Model.AllSongs)
        {
            string audio = String.Format("data:audio/*;base64,{0}", Convert.ToBase64String(song.Audio));
            <div class="songs__track">
                <span class="songs__track__count">@song.Id</span>
                <span class="songs__track__title">
                    <span>
                        <span>@song.Name</span>
                    </span>
                </span>
                <span class="songs__track__added">
                    <span class="material-icons-round" style="font-size: 16px;" onclick="addSong(@song.Id, '@song.Name', '@song.DateAdded')">
                        add_circle_outline
                    </span>
                    <span>@song.DateAdded.Replace("/", ".").Replace(" ", " - ").Remove(song.DateAdded.Length - 1)</span>
                </span>
            </div>
        }
    </div>
} else
{
    <br />
    <div class="addSongs" style="flex-direction: column; align-items: center;">
        <h1>Your Waveform library is empty.</h1><br />
        <h2>To start, <a asp-action="Add" asp-controller="Home">add some songs</a>.</h2>
    </div>
}

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script>
        let ok = 3;
        let formats = ['.png', '.jpg', '.jpeg'];
        const image = $('#playlist__image').attr('src');

        $('#image').change(function (e) {
            ok = 0;
            formats.some(format => {
                if ($('#image').val() !== '') {
                    if ($('#image').val().substring($('#image').val().lastIndexOf('.')) === format)
                        ok = e.target.files[0].size < 30000000 ? 2 : 1;
                } else ok = 2;
            });

            $('#size').css('display', ok === 1 ? 'block' : 'none');
            $('#type').css('display', ok === 0 ? 'block' : 'none');

            $('#playlist__image').attr('src',
                e.target.files[0] !== undefined ? URL.createObjectURL(e.target.files[0]) : image
            );
        });

        $('form').submit(function (e) {
            console.log(ok);
            ok < 2 && e.preventDefault();
        });

        function addSong(id, name, date) {
            $('#songs').val(function () { return this.value !== '' ? this.value + ',' + id : id });
            $('#playlist').append(`
                <div class="songs__track">
                    <span class="songs__track__count">${$('#playlist > div.songs__track').length + 1}</span>
                    <span class="songs__track__title">
                        <span>
                            <span>${name}</span>
                        </span>
                    </span>
                    <span class="songs__track__added">
                        <span class="material-icons-round remove" style="font-size: 16px;" onclick="removeSong(${$('#playlist > div.songs__track').length + 1})">
                            remove_circle_outline
                        </span>
                        <span>${date.replace('/', '.').replace(' ', ' - ').substring(0, date.length - 1)}</span>
                    </span>
                </div>
            `);
        }

        function removeSong(position) {
            songsToShift = $(`#playlist > div.songs__track:gt(${(position - 1)})`);

            songsToShift.each(function (index) {
                item = $(this)[0];

                let count = item.querySelector('.songs__track__count').innerHTML;
                item.querySelector('.songs__track__count').innerHTML = (parseInt(count) - 1);

                remove = item.querySelector('.songs__track__added > .remove');
                let i = $(remove).attr('onclick');
                $(remove).attr('onclick', `removeSong(${i.substring(i.indexOf('(') + 1, i.indexOf(')')) - 1})`);
            });

            let songs = $('#songs').val();
            songs = songs.split(',');
            songs.splice(position - 1, 1);
            $('#songs').val(songs.join(','));
            $(`#playlist > div.songs__track:eq(${position - 1})`).remove();
        }
    </script>
}
